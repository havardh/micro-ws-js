{
  "name": "jasmine-sinon",
  "version": "0.2.0",
  "description": "Jasmine BDD matchers for Sinon.JS",
  "main": "lib/jasmine-sinon.js",
  "scripts": {
    "test": "grunt travis"
  },
  "homepage": "http://github.com/froots/jasmine-sinon",
  "repository": {
    "type": "git",
    "url": "git://github.com/froots/jasmine-sinon.git"
  },
  "bugs": {
    "url": "http://github.com/froots/jasmine-sinon/issues"
  },
  "keywords": [
    "jasmine",
    "sinon"
  ],
  "author": {
    "name": "Jim Newbery",
    "email": "james@tinnedfruit.com",
    "url": "http://tinnedfruit.com"
  },
  "license": {
    "type": "BSD",
    "url": "http://github.com/froots/jasmine-sinon/blob/master/LICENSE"
  },
  "readmeFilename": "README.md",
  "engines": {
    "node": ">=0.1.103"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-karma-0.9.1": "~0.4.3",
    "grunt-jasmine-node": "~0.1.0"
  },
  "dependencies": {
    "sinon": "~1.7.2"
  },
  "readme": "# Jasmine matchers for Sinon.JS\n\n_jasmine-sinon_ provides a set of custom matchers for using the [Sinon.JS](http://sinonjs.org/) spying, stubbing and mocking library with [Jasmine BDD](http://pivotal.github.com/jasmine/).\n\nInstead of:\n\n    expect(mySinonSpy.calledWith('foo')).toBeTruthy();\n\nyou can say:\n\n    expect(mySinonSpy).toHaveBeenCalledWith('foo');\n\nThis is not only nicerer to look at in your purdy specs, but you get more descriptive failure output in your Jasmine spec runner.\n\nInstead of:\n\n    Expected false to be truthy.\n\nyou get:\n\n    Expected Function to have been called.\n\n## Installation\n\n### Direct include\n\nJust include <code>lib/jasmine-sinon.js</code> in your Jasmine test runner file.\nDon't forget to include [sinon.js](https://github.com/cjohansen/Sinon.JS).\n\n### With [jasmine-gem](https://github.com/pivotal/jasmine-gem)\n\nAdd it to <code>jasmine.yml</code>. Don't forget to include [sinon.js](https://github.com/cjohansen/Sinon.JS).\n\n### Node.js / NPM\n\n`npm install jasmine-sinon --save-dev`\n\nThen, in your jasmine spec:\n\n```javascript\nvar sinon = require('sinon');\nrequire('jasmine-sinon');\n```\n\n### Using Bower\n\n`bower install jasmine-sinon --save-dev`\n\nThen, include `components/jasmine-sinon/index.js` in your test runner.\n\n## Sinon.JS matchers\n\nIn general, you should be able to translate a Sinon spy/stub/mock API method to a _jasmine-sinon_ matcher by prepending _toHaveBeen_ to the front of the method name. For example, the Sinon.JS spy method <code>called</code> becomes <code>toHaveBeenCalled</code>. There are one or two exceptions to this rule, so the full list of matchers is given below.\n\n<table>\n    <tr>\n        <th>Sinon.JS property / method</th>\n        <th>jasmine-sinon matcher</th>\n    </tr>\n    <tr>\n        <td>called</td>\n        <td>toHaveBeenCalled</td>\n    </tr>\n    <tr>\n        <td>calledOnce</td>\n        <td>toHaveBeenCalledOnce</td>\n    </tr>\n    <tr>\n        <td>calledTwice</td>\n        <td>toHaveBeenCalledTwice</td>\n    </tr>\n    <tr>\n        <td>calledThrice</td>\n        <td>toHaveBeenCalledThrice</td>\n    </tr>\n    <tr>\n        <td>calledBefore()</td>\n        <td>toHaveBeenCalledBefore()</td>\n    </tr>\n    <tr>\n        <td>calledAfter()</td>\n        <td>toHaveBeenCalledAfter()</td>\n    </tr>\n    <tr>\n        <td>calledOn()</td>\n        <td>toHaveBeenCalledOn()</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledOn()</td>\n        <td>toHaveBeenAlwaysCalledOn()</td>\n    </tr>\n    <tr>\n        <td>calledWith()</td>\n        <td>toHaveBeenCalledWith()</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledWith()</td>\n        <td>toHaveBeenAlwaysCalledWith()</td>\n    </tr>\n    <tr>\n        <td>calledWithExactly()</td>\n        <td>toHaveBeenCalledWithExactly()</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledWithExactly()</td>\n        <td>toHaveBeenAlwaysCalledWithExactly()</td>\n    </tr>\n    <tr>\n        <td>calledWithMatch()</td>\n        <td>toHaveBeenCalledWithMatch()</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledWithMatch()</td>\n        <td>toHaveBeenAlwaysCalledWithMatch()</td>\n    </tr>\n    <tr>\n        <td>returned()</td>\n        <td>toHaveReturned()</td>\n    </tr>\n    <tr>\n        <td>alwaysReturned()</td>\n        <td>toHaveAlwaysReturned()</td>\n    </tr>\n    <tr>\n        <td>threw()</td>\n        <td>toHaveThrown()</td>\n    </tr>\n    <tr>\n        <td>alwaysThrew()</td>\n        <td>toHaveAlwaysThrown()</td>\n    </tr>\n</table>\n\nThese matchers will work on spies, individual spy calls, stubs and mocks.\n\nYou can also use Jasmine spies alongside your Sinon spies. _jasmine-sinon_ will detect which you're using and use the appropriate matcher.\n\n## Contributors\n\nThanks to:\n\n* @aelesbao for Exception matchers\n* @theinterned for, er, match matchers\n* @milichev for graceful spy matchers\n",
  "_id": "jasmine-sinon@0.2.0",
  "_from": "jasmine-sinon@"
}
